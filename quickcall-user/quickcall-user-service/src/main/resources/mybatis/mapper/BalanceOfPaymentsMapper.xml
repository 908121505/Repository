<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.honglu.quickcall.user.service.dao.BalanceOfPaymentsMapper">
    <resultMap id="BaseResultMap" type="com.honglu.quickcall.user.facade.entity.BalanceOfPayment">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="persion_id" jdbcType="INTEGER" property="persionId"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="token" jdbcType="DECIMAL" property="token"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="finish_date" jdbcType="TIMESTAMP" property="finishDate"/>
        <result column="state" jdbcType="INTEGER" property="state"/>
        <result column="present" jdbcType="INTEGER" property="present"/>
        <result column="chat" jdbcType="INTEGER" property="chat"/>
        <result column="other_id" jdbcType="INTEGER" property="otherId"/>
        <result column="capital" jdbcType="DOUBLE" property="capital"/>
        <result column="charm" jdbcType="INTEGER" property="charm"/>
        <result column="rong_order_id" jdbcType="VARCHAR" property="rongOrderId"/>
        <result column="adminget" jdbcType="DOUBLE" property="adminget"/>
        <result column="f_id" jdbcType="INTEGER" property="fId"/>
        <result column="f_rate" jdbcType="DOUBLE" property="fRate"/>
        <result column="s_id" jdbcType="INTEGER" property="sId"/>
        <result column="s_rate" jdbcType="DOUBLE" property="sRate"/>
        <result column="t_id" jdbcType="INTEGER" property="tId"/>
        <result column="t_rate" jdbcType="DOUBLE" property="tRate"/>
        <result column="grade" jdbcType="INTEGER" property="grade"/>
        <result column="a_flag" jdbcType="INTEGER" property="aFlag"/>
        <result column="photo" jdbcType="VARCHAR" property="photo"/>
        <result column="PRESENT_NAME" property="present_name" jdbcType="VARCHAR"/>
        <result column="PRICE" property="price" jdbcType="INTEGER"/>
        <result column="PRESENT_IMG" property="present_img" jdbcType="VARCHAR"/>
        <result column="CREATE_DATE" property="create_date" jdbcType="TIMESTAMP"/>
        <result column="PHOTO" property="photo" jdbcType="VARCHAR"/>
        <result column="NICK_NAME" property="nick_name" jdbcType="VARCHAR"/>
        <result column="NUMBER" property="number" jdbcType="INTEGER"/>
        <result column="unit_nums" property="unit_nums" jdbcType="INTEGER"/>

    </resultMap>

    <resultMap type="com.honglu.quickcall.user.facade.entity.AppBalanceOfPayments" id="onlineRecordMap">
        <id column="ID" property="id" jdbcType="INTEGER"/>
        <result column="CREATE_DATE" property="create_date" jdbcType="TIMESTAMP"/>
        <result column="FINISH_DATE" property="finish_date" jdbcType="TIMESTAMP"/>
        <result column="TOKEN" property="token" jdbcType="DECIMAL"/>
        <result column="TYPE" property="type" jdbcType="INTEGER"/>
        <result column="TIME" property="time" jdbcType="VARCHAR"/>
        <result column="persion_id" property="persion_id" jdbcType="INTEGER"/>
        <result column="other_id" property="other_id" jdbcType="INTEGER"/>
        <result column="PERSION_NAME" property="persion_name" jdbcType="VARCHAR"/>
        <result column="OTHER_NAME" property="other_name" jdbcType="VARCHAR"/>
        <result column="capital" jdbcType="DOUBLE" property="capital"/>


        <association property="buyPersion" javaType="Persion">
            <id column="PERSIONID" property="id" jdbcType="INTEGER"/>
            <result column="PERSIONN" property="nick_name" jdbcType="VARCHAR"/>
            <result column="PERSIONPHOTO" property="photo" jdbcType="VARCHAR"/>
            <result column="PERSIONBIRTHDAY" property="birthday" jdbcType="DATE"/>
        </association>

        <association property="sellPersion" javaType="Persion">
            <id column="OTHERID" property="id" jdbcType="INTEGER"/>
            <result column="OTHERPHOTO" property="photo" jdbcType="INTEGER"/>
            <result column="OTHERN" property="nick_name" jdbcType="INTEGER"/>
            <result column="OTHERBIRTHDAY" property="birthday" jdbcType="DATE"/>
        </association>
    </resultMap>

    <sql id="Base_Column_List">
        id, persion_id, type, token, create_date, finish_date, state, present, chat, other_id,
        capital, charm, rong_order_id, adminget, f_id, f_rate, s_id, s_rate, t_id, t_rate,
        grade, a_flag,unit_nums
    </sql>


    <select id="onlineRecord" parameterType="java.lang.Integer" resultMap="onlineRecordMap">
        SELECT
        B.ID,
        B.TOKEN,
        B.TYPE,
        B.FINISH_DATE,
        B.create_date,
        <!-- MIAOTOHMS(TIMESTAMPDIFF(SECOND,B.CREATE_DATE,B.FINISH_DATE)) AS TIME,-->
        P1.ID AS PERSIONID,
        P1.PHOTO AS PERSIONPHOTO,
        P1.NICK_NAME AS PERSIONN,
        P1.BIRTHDAY AS PERSIONBIRTHDAY,
        P2.ID AS OTHERID,
        P2.PHOTO AS OTHERPHOTO,
        P2.NICK_NAME AS OTHERN,
        P2.BIRTHDAY AS OTHERBIRTHDAY
        FROM
        BALANCE_OF_PAYMENTS B,PERSION P1,PERSION P2
        WHERE
        B.TYPE IN (2,3)
        AND
        (B.OTHER_ID = #{id} OR B.PERSION_ID = #{id})
        AND
        B.PERSION_ID = P1.ID
        AND
        B.OTHER_ID = P2.ID
        AND
        B.FINISH_DATE IS NOT NULL
        AND B.A_FLAG NOT IN (${id},3)
        ORDER BY
        B.FINISH_DATE DESC
        <if test="begin!=null and last!=null">
            LIMIT #{begin},#{last}
        </if>
    </select>

    <!-- 获取收到礼物总数 -->
    <select id="selectTotalPresent" resultType="java.lang.Integer">
		select sum(unit_nums)
		 from balance_of_payments 
		 where other_id =#{persion_id}
		 and TYPE = 4
  </select>

    <!-- 获取送出礼物总数 -->
    <select id="selectTotalPresentByPersionId" resultType="java.lang.Integer">
		select sum(unit_nums) 
		 from balance_of_payments 
		 where persion_id =#{persion_id}
		 and TYPE = 4
  </select>


    <!-- 获取礼物列表 -->
    <select id="selectDetailsPresent" parameterType="Map" resultMap="BaseResultMap">
		SELECT
  		B.ID AS ID,
		B.CREATE_DATE,
		B.TOKEN AS PRICE,
		B.PERSION_ID AS PID,
		P.PHOTO as photo,
		B.unit_nums ,
		B.present as present,
		P.NICK_NAME as nick_name,
		PR.PRESENT_NAME as PRESENT_NAME,
		PR.PRESENT_IMG as PRESENT_IMG
	FROM
		BALANCE_OF_PAYMENTS B,PRESENT PR,PERSION P 
	WHERE
		B.TYPE = 4
	AND
		PR.ID = B.PRESENT
	AND
		B.OTHER_ID = #{persion_id}
	AND
		P.ID = B.PERSION_ID
	ORDER BY
		B.CREATE_DATE DESC
	LIMIT #{pageIndex},#{pageSize}
  </select>


    <!-- 获取礼物列表 -->
    <select id="selectDetailsPresentByPersionId" parameterType="Map" resultMap="BaseResultMap">
		SELECT
  		B.ID AS ID,
		B.CREATE_DATE,
		B.TOKEN AS PRICE,
		B.PERSION_ID AS PID,
        B.unit_nums ,
        B.present as present,
		P.PHOTO as photo,
		P.NICK_NAME as nick_name,
		PR.PRESENT_NAME as PRESENT_NAME,
		PR.PRESENT_IMG as PRESENT_IMG
	FROM
		BALANCE_OF_PAYMENTS B,PRESENT PR,PERSION P 
	WHERE
		B.TYPE = 4
	AND
		PR.ID = B.PRESENT
	AND
		B.persion_id = #{persion_id}
	AND
		P.ID = B.PERSION_ID
	ORDER BY
		B.CREATE_DATE DESC
	LIMIT #{pageIndex},#{pageSize}
  </select>


    <select id="getPresentList" parameterType="int" resultMap="BaseResultMap">
        SELECT b.present,p.present_img,sum(unit_nums) NUMBER,
        p.present_name,p.price,p.result_img,p.buy_count
        FROM balance_of_payments b
        LEFT JOIN present p ON b.present = p.id
        WHERE b.other_id = #{otherId} AND b.type = 4 GROUP BY  present
        ORDER BY
            B.CREATE_DATE DESC
    </select>

    <select id="getPresentListByPersionId" parameterType="int" resultMap="BaseResultMap">
        SELECT b.present,p.present_img,sum(unit_nums) NUMBER,
        p.present_name,p.price,p.result_img,p.buy_count
        FROM balance_of_payments b
        LEFT JOIN present p ON b.present = p.id
        WHERE b.persion_id = #{otherId} AND b.type = 4 GROUP BY  present
        ORDER BY
            B.CREATE_DATE DESC
  </select>


    <select id="selectByAll" parameterType="Map" resultMap="onlineRecordMap">
	SELECT BP.ID ,BP.CREATE_DATE AS CREATE_DATE,TIMESTAMPDIFF(MINUTE,BP.CREATE_DATE,BP.FINISH_DATE) AS TIME,BP.STATE AS STATE,
		BP.TOKEN AS TOKEN,BP.persion_id,BP.other_id,BP.capital,
		BUY.NICK_NAME AS PERSION_NAME,SELL.NICK_NAME AS OTHER_NAME,BUY.ID 
		AS PERSION_ID,SELL.ID 
		AS OTHER_ID,BP.TYPE AS TYPE
		FROM BALANCE_OF_PAYMENTS BP 
		LEFT JOIN PRESENT P ON BP.PRESENT=P.ID
		LEFT JOIN PERSION BUY ON BP.PERSION_ID = BUY.ID
		LEFT JOIN PERSION SELL ON BP.OTHER_ID=SELL.ID
		WHERE 1=1
		AND (BP.OTHER_ID=#{persion_id} OR BP.PERSION_ID=#{persion_id})
		ORDER BY BP.CREATE_DATE DESC 
		LIMIT #{begin},#{last}
	</select>


    <select id="selectByManIncome" parameterType="Map" resultType="com.honglu.quickcall.user.facade.entity.AppBalanceOfPayments">
       select
	      *
      from balance_of_payments
      where  1= 1
      and type in (6,7,9,10,11,12,14,16,17)
      and persion_id = #{persion_id}
      and batch_no is null
      ORDER BY CREATE_DATE DESC
      LIMIT #{begin},#{last}
    </select>

    <select id="selectByLadyExpend" parameterType="Map" resultType="com.honglu.quickcall.user.facade.entity.AppBalanceOfPayments">
       select
	      capital,token,batch_no,create_date , type, persion_id , other_id ,other_name
        from balance_of_payments
        where  1= 1
        AND  TYPE IN (6,13)
        AND other_id = #{persion_id}
        AND  batch_no is null
        ORDER BY CREATE_DATE DESC
        LIMIT #{begin},#{last}
    </select>

    <!-- 男士所有支出记录,同一个批次的记录 -->
    <select id="getManConsumeOrderLists" parameterType="Map" resultType="com.honglu.quickcall.user.facade.entity.AppBalanceOfPayments">
   select *
    from (
        select
            token,batch_no,create_date , type, persion_id , other_id,other_name
          from balance_of_payments
          where  1= 1
          and type in(1,2,3,4,5,13)
          and persion_id = #{persion_id}
          and batch_no is null

    union all

        select sum(token) as token,batch_no,create_date , type, persion_id , other_id,other_name
        from balance_of_payments
        where 1=1
        and type in(1,2,3,4,5,13)
        and batch_no is not null
        and persion_id = #{persion_id}
        group by batch_no ) m order by create_date desc
        LIMIT #{begin},#{last}

    </select>

    <!-- 女生收入流水详情 -->
    <select id="getWomanIncomeOrderLists" parameterType="Map" resultType="com.honglu.quickcall.user.facade.entity.AppBalanceOfPayments">
        select *
    from (
        select
            capital,batch_no,create_date , type, persion_id , other_id,other_name
          from balance_of_payments
          where  1= 1
          and type in(1,2,3,4,5,7,9,10,11,12,14,15)
          and other_id = #{persion_id}
          and batch_no is null

    union all

        select sum(capital) as capital,batch_no,create_date , type, persion_id , other_id,other_name
        from balance_of_payments
        where 1=1
        and type in(1,2,3,4,5,7,9,10,11,12,14,15)
        and batch_no is not null
        and other_id = #{persion_id}
        group by batch_no ) m order by create_date desc
        LIMIT #{begin},#{last}
    </select>



    <select id="selectByFirst" parameterType="Map" resultMap="onlineRecordMap">
        SELECT BP.ID,MAX(BP.CREATE_DATE) AS CREATE_DATE
        <if test="state==1">
            ,SUM(BP.CAPITAL) AS CAPITAL,BUY.NICK_NAME AS OTHER_NAME,BUY.ID AS OTHER_ID,SELL.ID AS
            PERSION_ID
        </if>
        <if test="state==2">
            ,SUM(BP.TOKEN) AS TOKEN,SELL.NICK_NAME AS OTHER_NAME,SELL.ID AS OTHER_ID,BUY.ID AS
            PERSION_ID
        </if>
        FROM BALANCE_OF_PAYMENTS BP LEFT JOIN PRESENT P ON
        BP.PRESENT=P.ID,PERSION BUY,PERSION SELL
        WHERE BP.PERSION_ID = BUY.ID AND BP.OTHER_ID=SELL.ID
        <if test="state==1">
            AND BP.OTHER_ID=#{persion_id}
        </if>
        <if test="state==2">
            AND BP.PERSION_ID=#{persion_id}
        </if>
        GROUP BY BP.OTHER_ID,BP.PERSION_ID
        ORDER BY BP.CREATE_DATE DESC LIMIT
        #{begin},#{last}
    </select>

    <select id="selectBySecond" parameterType="Map" resultMap="onlineRecordMap">
        select bp.id,bp.type,bp.create_date,p.present_name
        <if test="state==1">
            ,bp.token,bp.capital,buy.nick_name as other_name,buy.id as other_id,sell.id as persion_id
        </if>
        <if test="state==2">
            ,bp.token,sell.nick_name as other_name,sell.id as other_id,buy.id as persion_id
        </if>
        from balance_of_payments bp left join present p on
        bp.present=p.id,persion buy,persion sell
        where bp.persion_id = buy.id and bp.other_id=sell.id
        <if test="state==1">
            and bp.other_id=#{persion_id} and
            bp.persion_id=#{other_id}
        </if>
        <if test="state==2">
            and bp.persion_id=#{persion_id} and
            bp.other_id=#{other_id}
        </if>
        order by bp.create_date desc limit #{begin},#{last}
    </select>

    <select id="selectByThird" parameterType="Map" resultMap="onlineRecordMap">
        select bp.id,bp.type,bp.create_date,p.present_name
        <if test="state==1">
            ,bp.capital,buy.nick_name as other_name,buy.id as other_id,sell.id as persion_id
        </if>
        <if test="state==2">
            ,bp.token,sell.nick_name as other_name,sell.id as other_id,buy.id as persion_id
        </if>
        from balance_of_payments bp left join present p on
        bp.present=p.id,persion buy,persion sell
        where bp.persion_id = buy.id and bp.other_id=sell.id and bp.type=1
        <if test="state==1">
            and bp.other_id=#{persion_id} and
            bp.persion_id=#{other_id}
        </if>
        <if test="state==2">
            and bp.persion_id=#{persion_id} and
            bp.other_id=#{other_id}
        </if>
        order by bp.create_date desc limit #{begin},#{last}
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from balance_of_payments
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from balance_of_payments
    where id = #{id,jdbcType=INTEGER}
  </delete>

    <insert id="insert" parameterType="com.honglu.quickcall.user.facade.entity.BalanceOfPayment">
    insert into balance_of_payments (id, persion_id, type, 
      token, create_date, finish_date, 
      state, present, chat, 
      other_id, capital, charm, 
      rong_order_id, adminget, f_id, 
      f_rate, s_id, s_rate, t_id, 
      t_rate, grade, a_flag)
    values (#{id,jdbcType=INTEGER}, #{persionId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, 
      #{token,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{finishDate,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=INTEGER}, #{present,jdbcType=INTEGER}, #{chat,jdbcType=INTEGER}, 
      #{otherId,jdbcType=INTEGER}, #{capital,jdbcType=DOUBLE}, #{charm,jdbcType=INTEGER}, 
      #{rongOrderId,jdbcType=VARCHAR}, #{adminget,jdbcType=DOUBLE}, #{fId,jdbcType=INTEGER}, 
      #{fRate,jdbcType=DOUBLE}, #{sId,jdbcType=INTEGER}, #{sRate,jdbcType=DOUBLE}, #{tId,jdbcType=INTEGER}, 
      #{tRate,jdbcType=DOUBLE}, #{grade,jdbcType=INTEGER}, #{aFlag,jdbcType=INTEGER})
  </insert>

    <insert id="insertSelective" parameterType="com.honglu.quickcall.user.facade.entity.BalanceOfPayment">
        insert into balance_of_payments
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="persionId != null">
                persion_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="token != null">
                token,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="finishDate != null">
                finish_date,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="present != null">
                present,
            </if>
            <if test="chat != null">
                chat,
            </if>
            <if test="otherId != null">
                other_id,
            </if>
            <if test="capital != null">
                capital,
            </if>
            <if test="charm != null">
                charm,
            </if>
            <if test="rongOrderId != null">
                rong_order_id,
            </if>
            <if test="adminget != null">
                adminget,
            </if>
            <if test="fId != null">
                f_id,
            </if>
            <if test="fRate != null">
                f_rate,
            </if>
            <if test="sId != null">
                s_id,
            </if>
            <if test="sRate != null">
                s_rate,
            </if>
            <if test="tId != null">
                t_id,
            </if>
            <if test="tRate != null">
                t_rate,
            </if>
            <if test="grade != null">
                grade,
            </if>
            <if test="aFlag != null">
                a_flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="persionId != null">
                #{persionId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="token != null">
                #{token,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="finishDate != null">
                #{finishDate,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="present != null">
                #{present,jdbcType=INTEGER},
            </if>
            <if test="chat != null">
                #{chat,jdbcType=INTEGER},
            </if>
            <if test="otherId != null">
                #{otherId,jdbcType=INTEGER},
            </if>
            <if test="capital != null">
                #{capital,jdbcType=DOUBLE},
            </if>
            <if test="charm != null">
                #{charm,jdbcType=INTEGER},
            </if>
            <if test="rongOrderId != null">
                #{rongOrderId,jdbcType=VARCHAR},
            </if>
            <if test="adminget != null">
                #{adminget,jdbcType=DOUBLE},
            </if>
            <if test="fId != null">
                #{fId,jdbcType=INTEGER},
            </if>
            <if test="fRate != null">
                #{fRate,jdbcType=DOUBLE},
            </if>
            <if test="sId != null">
                #{sId,jdbcType=INTEGER},
            </if>
            <if test="sRate != null">
                #{sRate,jdbcType=DOUBLE},
            </if>
            <if test="tId != null">
                #{tId,jdbcType=INTEGER},
            </if>
            <if test="tRate != null">
                #{tRate,jdbcType=DOUBLE},
            </if>
            <if test="grade != null">
                #{grade,jdbcType=INTEGER},
            </if>
            <if test="aFlag != null">
                #{aFlag,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.honglu.quickcall.user.facade.entity.BalanceOfPayment">
        update balance_of_payments
        <set>
            <if test="persionId != null">
                persion_id = #{persionId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="token != null">
                token = #{token,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="finishDate != null">
                finish_date = #{finishDate,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
            <if test="present != null">
                present = #{present,jdbcType=INTEGER},
            </if>
            <if test="chat != null">
                chat = #{chat,jdbcType=INTEGER},
            </if>
            <if test="otherId != null">
                other_id = #{otherId,jdbcType=INTEGER},
            </if>
            <if test="capital != null">
                capital = #{capital,jdbcType=DOUBLE},
            </if>
            <if test="charm != null">
                charm = #{charm,jdbcType=INTEGER},
            </if>
            <if test="rongOrderId != null">
                rong_order_id = #{rongOrderId,jdbcType=VARCHAR},
            </if>
            <if test="adminget != null">
                adminget = #{adminget,jdbcType=DOUBLE},
            </if>
            <if test="fId != null">
                f_id = #{fId,jdbcType=INTEGER},
            </if>
            <if test="fRate != null">
                f_rate = #{fRate,jdbcType=DOUBLE},
            </if>
            <if test="sId != null">
                s_id = #{sId,jdbcType=INTEGER},
            </if>
            <if test="sRate != null">
                s_rate = #{sRate,jdbcType=DOUBLE},
            </if>
            <if test="tId != null">
                t_id = #{tId,jdbcType=INTEGER},
            </if>
            <if test="tRate != null">
                t_rate = #{tRate,jdbcType=DOUBLE},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=INTEGER},
            </if>
            <if test="aFlag != null">
                a_flag = #{aFlag,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.honglu.quickcall.user.facade.entity.BalanceOfPayment">
    update balance_of_payments
    set persion_id = #{persionId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      token = #{token,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      finish_date = #{finishDate,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      present = #{present,jdbcType=INTEGER},
      chat = #{chat,jdbcType=INTEGER},
      other_id = #{otherId,jdbcType=INTEGER},
      capital = #{capital,jdbcType=DOUBLE},
      charm = #{charm,jdbcType=INTEGER},
      rong_order_id = #{rongOrderId,jdbcType=VARCHAR},
      adminget = #{adminget,jdbcType=DOUBLE},
      f_id = #{fId,jdbcType=INTEGER},
      f_rate = #{fRate,jdbcType=DOUBLE},
      s_id = #{sId,jdbcType=INTEGER},
      s_rate = #{sRate,jdbcType=DOUBLE},
      t_id = #{tId,jdbcType=INTEGER},
      t_rate = #{tRate,jdbcType=DOUBLE},
      grade = #{grade,jdbcType=INTEGER},
      a_flag = #{aFlag,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <insert id="addConsume" parameterType="com.honglu.quickcall.user.facade.entity.AppBalanceOfPayments"
            useGeneratedKeys="true" keyProperty="id">
        <selectKey resultType="Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID() AS ID
        </selectKey>
        INSERT
        INTO
        BALANCE_OF_PAYMENTS
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="persion_id != null and persion_id != 0">
                PERSION_ID,
            </if>
            <if test="type != null and type != 0">
                TYPE,
            </if>
            <if test="token != null">
                TOKEN,
            </if>
            <if test="state != null and state != 0">
                STATE,
            </if>
            <if test="create_date != null">
                CREATE_DATE,
            </if>
            <if test="finish_date != null">
                FINISH_DATE,
            </if>
            <if test="other_id != null and other_id != 0">
                OTHER_ID,
            </if>
            <if test="present != null and present != 0">
                PRESENT,
            </if>
            <if test="capital != null and capital != 0">
                CAPITAL,
            </if>
            <if test="adminget != null and adminget != 0">
                ADMINGET,
            </if>
            <if test="f_id != null and f_id != 0">
                F_ID,
            </if>
            <if test="f_rate != null and f_rate != 0">
                F_RATE,
            </if>
            <if test="s_id != null and s_id != 0">
                S_ID,
            </if>
            <if test="s_rate != null and s_rate != 0">
                S_RATE,
            </if>
            <if test="t_id != null and t_id != 0">
                T_ID,
            </if>
            <if test="t_rate != null and t_rate != 0">
                T_RATE,
            </if>
            <if test="chat != null">
                CHAT,
            </if>
            <if test="in_account_oper_id != null and in_account_oper_id !='' ">
                in_account_oper_id,
            </if>

            <if test="out_account_oper_id != null and out_account_oper_id !='' ">
                out_account_oper_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="persion_id != null and persion_id != 0">
                #{persion_id,jdbcType=INTEGER},
            </if>
            <if test="type != null and type != 0">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="token != null">
                #{token,jdbcType=DECIMAL},
            </if>
            <if test="state != null and state != 0">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="create_date != null">
                #{create_date,jdbcType=TIMESTAMP},
            </if>
            <if test="finish_date != null">
                #{finish_date,jdbcType=TIMESTAMP},
            </if>
            <if test="other_id != null and other_id != 0">
                #{other_id,jdbcType=INTEGER},
            </if>
            <if test="present != null and present != 0">
                #{present,jdbcType=INTEGER},
            </if>
            <if test="capital != null and capital != 0">
                #{capital,jdbcType=DOUBLE},
            </if>
            <if test="adminget != null and adminget != 0">
                #{adminget,jdbcType=DOUBLE},
            </if>
            <if test="f_id != null and f_id != 0">
                #{f_id,jdbcType=INTEGER},
            </if>
            <if test="f_rate != null and f_rate != 0">
                #{f_rate,jdbcType=DOUBLE},
            </if>
            <if test="s_id != null and s_id != 0">
                #{s_id,jdbcType=INTEGER},
            </if>
            <if test="s_rate != null and s_rate != 0">
                #{s_rate,jdbcType=DOUBLE},
            </if>
            <if test="t_id != null and t_id != 0">
                #{t_id,jdbcType=INTEGER},
            </if>
            <if test="t_rate != null and t_rate != 0">
                #{t_rate,jdbcType=DOUBLE},
            </if>
            <if test="chat != null">
                #{chat,jdbcType=INTEGER},
            </if>
            <if test="in_account_oper_id != null and in_account_oper_id !='' ">
                #{in_account_oper_id,jdbcType=VARCHAR},
            </if>
            <if test="out_account_oper_id != null and out_account_oper_id !='' ">
                #{out_account_oper_id,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>


</mapper>