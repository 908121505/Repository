<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.honglu.quickcall.user.service.dao.WithDrawMapper">
  <resultMap id="BaseResultMap" type="com.honglu.quickcall.user.facade.entity.WithDraw">
    <id column="id" jdbcType="INTEGER" property="id" />
    <id column="onceid" jdbcType="VARCHAR" property="onceid" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="money" jdbcType="DECIMAL" property="money" />
    <result column="createdate" jdbcType="TIMESTAMP" property="createdate" />
    <result column="handledate" jdbcType="TIMESTAMP" property="handledate" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="batchNo" jdbcType="VARCHAR" property="batchno" />
    <result column="adminid" jdbcType="INTEGER" property="adminid" />
    <result column="platform_cost" jdbcType="DECIMAL" property="platformCost" />
    <result column="dealWith" jdbcType="INTEGER" property="dealwith" />
  </resultMap>
  <sql id="Base_Column_List">
    id, onceid, pid, money, createdate, handledate, state, batchNo, adminid, platform_cost, 
    dealWith
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.honglu.quickcall.user.facade.entity.WithDraw" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from withdraw
    where id = #{id,jdbcType=INTEGER}
      and onceid = #{onceid,jdbcType=VARCHAR}
  </select>
  
  <select id="selectByPid"  resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from withdraw
    where pid = #{pid,jdbcType=INTEGER}
    order by id desc
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="com.honglu.quickcall.user.facade.entity.WithDraw">
    delete from withdraw
    where id = #{id,jdbcType=INTEGER}
      and onceid = #{onceid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.honglu.quickcall.user.facade.entity.WithDraw">
    insert into withdraw (id, onceid, pid, 
      money, createdate, handledate, 
      state, batchNo, adminid, 
      platform_cost, dealWith)
    values (#{id,jdbcType=INTEGER}, #{onceid,jdbcType=VARCHAR}, #{pid,jdbcType=INTEGER}, 
      #{money,jdbcType=DECIMAL}, #{createdate,jdbcType=TIMESTAMP}, #{handledate,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=INTEGER}, #{batchno,jdbcType=VARCHAR}, #{adminid,jdbcType=INTEGER}, 
      #{platformCost,jdbcType=DECIMAL}, #{dealwith,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.honglu.quickcall.user.facade.entity.WithDraw">
    insert into withdraw
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="onceid != null">
        onceid,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="createdate != null">
        createdate,
      </if>
      <if test="handledate != null">
        handledate,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="batchno != null">
        batchNo,
      </if>
      <if test="adminid != null">
        adminid,
      </if>
      <if test="platformCost != null">
        platform_cost,
      </if>
      <if test="dealwith != null">
        dealWith,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="onceid != null">
        #{onceid,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="createdate != null">
        #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="handledate != null">
        #{handledate,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="batchno != null">
        #{batchno,jdbcType=VARCHAR},
      </if>
      <if test="adminid != null">
        #{adminid,jdbcType=INTEGER},
      </if>
      <if test="platformCost != null">
        #{platformCost,jdbcType=DECIMAL},
      </if>
      <if test="dealwith != null">
        #{dealwith,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.honglu.quickcall.user.facade.entity.WithDraw">
    update withdraw
    <set>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="createdate != null">
        createdate = #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="handledate != null">
        handledate = #{handledate,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="batchno != null">
        batchNo = #{batchno,jdbcType=VARCHAR},
      </if>
      <if test="adminid != null">
        adminid = #{adminid,jdbcType=INTEGER},
      </if>
      <if test="platformCost != null">
        platform_cost = #{platformCost,jdbcType=DECIMAL},
      </if>
      <if test="dealwith != null">
        dealWith = #{dealwith,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
      and onceid = #{onceid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.honglu.quickcall.user.facade.entity.WithDraw">
    update withdraw
    set pid = #{pid,jdbcType=INTEGER},
      money = #{money,jdbcType=DECIMAL},
      createdate = #{createdate,jdbcType=TIMESTAMP},
      handledate = #{handledate,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      batchNo = #{batchno,jdbcType=VARCHAR},
      adminid = #{adminid,jdbcType=INTEGER},
      platform_cost = #{platformCost,jdbcType=DECIMAL},
      dealWith = #{dealwith,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
      and onceid = #{onceid,jdbcType=VARCHAR}
  </update>
</mapper>