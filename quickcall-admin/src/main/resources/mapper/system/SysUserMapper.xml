<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SysUser">
	<resultMap id="sysUserResultMap" type="SysUser">
		<id property="id" column="id" />
		<id property="account" column="account" />
		<id property="nick_name" column="nick_name" />
		<id property="user_name" column="user_name" />
		<id property="password" column="password" />
		<id property="sex" column="sex"/>
	</resultMap>
	
	<select id="get" parameterType="map" resultMap="sysUserResultMap">
		select id,account,nick_name,user_name,sex from sys_user
		where account=#{arg0} and password=#{arg1}
	</select>
	
	<select id="queryCount" parameterType="map" resultType="int">
		select count(id) from sys_user where 1=1
		<if test="null !=account">and account like concat('%',#{account},'%') </if>
	</select>
	<select id="query" parameterType="map" resultMap="sysUserResultMap">
		select id,account,nick_name,user_name,
		CASE sex WHEN  '1' THEN '男'
		ELSE '女' END as 'sex'  from sys_user where 1=1
		<if test="null !=account">and account like concat('%',#{account},'%') </if>
		limit ${iDisplayStart},${iDisplayLength}
	</select>
	
	<insert id="insert" parameterType="map">
		insert into sys_user(account,nick_name,user_name,sex,password) 
		values(#{account},#{nick_name},#{user_name},#{sex},#{password})
	</insert>
	
	<delete id="delete" parameterType="map">
		delete from sys_user where id = #{arg0}
	</delete>
	
	<select id="getUserById" parameterType="map" resultMap="sysUserResultMap">
		select id,account,nick_name,user_name,sex from sys_user
		where id=#{arg0}
	</select>
	
	<update id="update" parameterType="map">
		update sys_user 
		<set>
			<if test="null !=sex">sex=#{sex},</if>
			<if test="null !=user_name">user_name=#{user_name},</if>
			<if test="null !=nick_name ">nick_name=#{nick_name},</if>
			<if test="null !=password">password = #{password}</if>
		</set>
		where id=#{id}
	</update>
	
	<resultMap id="queryOperUserRole" type="QueryOperUserRole">
		<collection property="roles" column="account" ofType="SysRole" select="selectAllRoles"></collection>
		<collection property="selectRoles" column="account" ofType="SysRole" select="selectCheckRoles"></collection>
	</resultMap>
	<select id="queryRolesByAccount" resultType="map" resultMap="queryOperUserRole">
		select #{arg0} as 'account'
	</select>
	<select id="selectAllRoles" parameterType="map" resultMap="SysRole.sysRoleMap">
		SELECT codes,names from sys_role 
	</select>
	<select id="selectCheckRoles" parameterType="map" resultMap="SysRole.sysRoleMap">
		SELECT sr.codes,sr.names from sys_user_role sur
		LEFT JOIN sys_role sr on sur.role_code = sr.codes
		where sur.account = #{account}
	</select>
	
	<select id="getUserByAccount" parameterType="map" resultMap="sysUserResultMap">
		select id,account,nick_name,user_name,password,sex from sys_user where account=#{arg0}
	</select>
	<select id="queryRoleCodeByAccount" parameterType="map" resultType="string">
		SELECT role_code from sys_user_role where account=#{account}
	</select>
	<select id="queryAuthors" parameterType="map" resultType="string">
		SELECT DISTINCT sm.author from sys_role_menu srm 
		LEFT JOIN sys_menu sm on srm.menu_id = sm.id
		where sm.author is not null and srm.role_code in
		<foreach collection="list" open="(" separator="," close=")" item="rolecode">
			#{rolecode}
		</foreach>
	</select>
</mapper>
